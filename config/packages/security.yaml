security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        user: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_jwt:
            lexik_jwt: ~

        user_db:
            entity:
                class: App\EmployeePortal\Authentication\User\User
                property: id

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_example_project_frontend:
            host: '%api_host%'
            pattern: ^/api/example-project/(?!auth/token$)
            stateless: true
            provider: user_jwt
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: api_example_project_auth_token_refresh

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { host: '%api_host%', path: ^\/api\/.*doc\.(json|html)$, roles: PUBLIC_ACCESS }

        - { host: '%api_host%', route: api_example_project_auth_anonymous_token, roles: PUBLIC_ACCESS }

        - { host: '%api_host%', path: ^/api/example-project/auth/, roles: ROLE_ANONYMOUS }
        - { host: '%api_host%', path: ^/api/example-project/voucher/, roles: PUBLIC_ACCESS }
        - { host: '%api_host%', path: ^/api/example-project/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
